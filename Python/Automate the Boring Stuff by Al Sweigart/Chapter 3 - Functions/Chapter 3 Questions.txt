Q: 1. Why are functions advantageous to have in your programs?
#Functions repeat code over and over to shorten your programs.


Q: 2. When does the code in a function execute: when the function is defined or when the function is called?
#Called.


Q: 3. What statement creates a function?
#def


Q: 4. What is the difference between a function and a function call?
#The function is where the code is defined, the call is where it's executed.


Q: 5. How many global scopes are there in a Python program? How many local scopes?
#There is one global scope in Python, there are as many local scopes as there are functions.


Q: 6. What happens to variables in a local scope when the function call returns?
#Variables in the local scope are forgotten after a function returns.


Q: 7. What is a return value? Can a return value be part of an expression?
#The return value is the output of a function.
#Yes


Q: 8. If a function does not have a return statement, what is the return value of a call to that function?
#None


Q: 9. How can you force a variable in a function to refer to the global variable?
#The keyword global.


Q: 10. What is the data type of None?
#NoneType


Q: 11. What does the import areallyourpetsnamederic statement do?
#Imports the module areallyourpetsnamederic.


Q: 12. If you had a function named bacon() in a module named spam, how would you call it after importing spam?
#spam.bacon()


Q: 13. How can you prevent a program from crashing when it gets an error?
#Use try/except statements to return an error message.


Q: 14. What goes in the try clause? What goes in the except clause?
#The code to be executed goes in the try clause. The error handling goes in the except clause.


Sweigart, Al. Automate the Boring Stuff with Python: Practical Programming for Total Beginners (p. 76). No Starch Press. Kindle Edition. 