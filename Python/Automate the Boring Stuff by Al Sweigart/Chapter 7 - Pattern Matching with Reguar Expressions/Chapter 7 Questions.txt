Q: 1. What is the function that creates Regex objects?
# re.compile()


Q: 2. Why are raw strings often used when creating Regex objects?
# Raw strings are used so backslashes do not have to be escaped


Q: 3. What does the search() method return?
# *.search() returns a MATCH object or None of strings which match the regex


Q: 4. How do you get the actual strings that match the pattern from a Match object?
# By using the .group() function


Q: 5. In the regex created from r'(\ d\ d\ d)-(\ d\ d\ d-\ d\ d\ d\ d)', what does group 0 cover? Group 1? Group 2?
# Group 0 covers all, (\ d\ d\ d)-(\ d\ d\ d-\ d\ d\ d\ d)
# Group 1 covers the first parentheses, (\ d\ d\ d)
# Group 2 covers the second parentheses, (\ d\ d\ d-\ d\ d\ d\ d)


Q: 6. Parentheses and periods have specific meanings in regular expression syntax. How would you specify that you want a regex to match actual parentheses and period characters?
# Use an escape backslash (\) in front of it


Q: 7. The findall() method returns a list of strings or a list of tuples of strings. What makes it return one or the other?
# If there are no groups, .findall() returns a list of strings. If there are groups in the regex, .findall() returns a list of tuples of strings.


Q: 8. What does the | character signify in regular expressions?
# Bitwise or, or any of the possible matches separated by the | are valid


Q: 9. What two things does the ? character signify in regular expressions?
# Either one or none of something, it is an optional search used to signify nongreedy matching


Q: 10. What is the difference between the + and * characters in regular expressions?
# The + searches for one or more instances of a character
# The * searches for zero or more instances of a character


Q: 11. What is the difference between {3} and {3,5} in regular expressions?
# {3} will match any instances with exactly 3 characters
# {3,5} will match any instances with 3, 4, or 5 characters


Q: 12. What do the \d, \w, and \s shorthand character classes signify in regular expressions?
# \d = digit character from 0 to 9
# \w = letter, numeric digit, or underscore
# \s = space, tab or newline


Q: 13. What do the \D, \W, and \S shorthand character classes signify in regular expressions?
# \D = not digit character from 0 to 9
# \W = not letter, numeric digit, or underscore
# \S = not space, tab or newline


Q: 14. How do you make a regular expression case-insensitive?
# Pass re.I or re.IGNORECASE to the second parameter in re.compile()


Q: 15. What does the . character normally match? What does it match if re.DOTALL is passed as the second argument to re.compile()?
# The . character matches any character except newline characters. re.DOTALL matches all characters including newline.


Q: 16. What is the difference between .* and .*??
# .* matches in a greedy fashion, .*? matches in a non-greedy fashion


Q: 17. What is the character class syntax to match all numbers and lowercase letters?
# [a-z0-9]


Q: 18. If numRegex = re.compile(r'\d+'), what will numRegex.sub('X', '12 drummers, 11 pipers, five rings, 3 hens') return?
# 'X drummers, X pipers, five rings, X hens'


Q: 19. What does passing re.VERBOSE as the second argument to re.compile() allow you to do?
# It allows you to use a multiline regex to make your code look cleaner when calling out a Regex


Q: 20. How would you write a regex that matches a number with commas for every three digits?
It must match the following:
'42'
'1,234'
'6,368,745'

but not the following:

'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)

# re.compile(r"^\d{1,3}(,\d{3})*$")


Q: 21. How would you write a regex that matches the full name of someone whose last name is Nakamoto?
You can assume that the first name that comes before it will always be one word that begins with a capital letter.
The regex must match the following:

'Satoshi Nakamoto'
'Alice Nakamoto'
'RoboCop Nakamoto'

but not the following:

'satoshi Nakamoto' (where the first name is not capitalized)
'Mr. Nakamoto' (where the preceding word has a nonletter character)
'Nakamoto' (which has no first name)
'Satoshi nakamoto' (where Nakamoto is not capitalized)

# re.compile(r'^[A-Z][a-zA-Z]*\sNakamoto$')


Q: 22. How would you write a regex that matches a sentence where
the first word is either Alice, Bob, or Carol;
the second word is either eats, pets, or throws;
the third word is apples, cats, or baseballs;
and the sentence ends with a period?

This regex should be case-insensitive. It must match the following:

'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'

but not the following:

'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'

# re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.', re.IGNORECASE)



Sweigart, Al. Automate the Boring Stuff with Python: Practical Programming for Total Beginners (pp. 170-172). No Starch Press. Kindle Edition. 