Q: 1. What is []?
#[] is an empty list.

Q: 2. How would you assign the value 'hello' as the third value in a list stored in a variable named spam? (Assume spam contains [2, 4, 6, 8, 10].)
#spam[2] = "hello"

For the following three questions, let’s say spam contains the list [' a', 'b', 'c', 'd'].
Q: 3. What does spam[int(int('3' * 2) / 11)] evaluate to?
#d

Q: 4. What does spam[-1] evaluate to?
#d

Q: 5. What does spam[: 2] evaluate to?
#["a", "b"]

For the following three questions, let’s say bacon contains the list [3.14, 'cat', 11, 'cat', True].
Q: 6. What does bacon.index('cat') evaluate to?
#1

Q: 7. What does bacon.append(99) make the list value in bacon look like?
#[3.14, 'cat', 11, 'cat', True, 99]

Q: 8. What does bacon.remove('cat') make the list value in bacon look like?
#[3.14, 11, 'cat', True] 

Q: 9. What are the operators for list concatenation and list replication?
#+ and *

Q: 10. What is the difference between the append() and insert() list methods?
#.append() always adds the new list item to the end of the list.
#.insert() can put a new list item at any index of a list.

Q: 11. What are two ways to remove values from a list?
#.remove()
#del

Q: 12. Name a few ways that list values are similar to string values.
#They both can contain letters.
#They can both be indexed.

Q: 13. What is the difference between lists and tuples?
#Lists are mutable, which means they can be changed in place. Lists use [].
#Tuples can not be changed in place. Tuples use ().

Q: 14. How do you type the tuple value that has just the integer value 42 in it?
#(42, )

Q: 15. How can you get the tuple form of a list value? How can you get the list form of a tuple value?
#tuple([])
#list(())

Q: 16. Variables that “contain” list values don’t actually contain lists directly. What do they contain instead?
#References to a list.

Q: 17. What is the difference between copy.copy() and copy.deepcopy()?
#copy.copy() copies lists but copy.deepcopy() copies lists within lists also

Sweigart, Al. Automate the Boring Stuff with Python: Practical Programming for Total Beginners (p. 102). No Starch Press. Kindle Edition. 